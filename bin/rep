#!/usr/bin/env python
#
# Copyright 2014 David Z. Chen
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import os
from subprocess import Popen, PIPE
import shutil
import sys
import getopt
from shlex import split

DEFAULT_SHORT_OPTS = 'h'
DEFAULT_LONG_OPTS = ['help']

USAGE_TEXT = """
usage rep <command> [<arguments>]

Where <command> is one of:

  sync

  find

  ls

  info

  clone

"""

CONFIGS_DEFAULT_KEY = 'default'

class Print:
  UPDATE = '\033[94m'
  INSTALL = '\033[92m'
  REMOVE = '\033[93m'
  ENDC = '\033[0m'

  INDICATOR = '==> '

  @staticmethod
  def install(message):
    print Print.INSTALL + Print.INDICATOR + Print.ENDC + message

  @staticmethod
  def remove(message):
    print Print.REMOVE + Print.INDICATOR + Print.ENDC + message

  @staticmethod
  def update(message):
    print Print.UPDATE + Print.INDICATOR + Print.ENDC + message

class Config:
  name = ""
  repos_dir = ""
  repo_names = []
  pager = ""

  scm_name_map = {}
  scm_meta_map = {}

  def __init__(self, name, repos_dir, pager):
    self.name = name
    self.repos_dir = os.path.expanduser(repos_dir)
    self.pager = pager

    dirs = os.walk(self.repos_dir).next()[1]
    for dir in dirs:
      if dir.startswith('.'):
        continue
      self.repo_names.append(dir)

  def install_scms(self, scms):
    self.scm_name_map = scms
    for name, scm in scms.iteritems():
      self.scm_meta_map[scm.meta] = scm

  def scm_for_meta(self, meta):
    return self.scm_meta_map[meta]

  def scm_for_name(self, name):
    return self.scm_name_map[name]

  def detect_scm(self, repo_dir):
    for meta, scm in self.scm_meta_map.iteritems():
      if os.path.exists(os.path.join(repo_dir, meta)):
        return scm
    return None

class Scm:
  name = ""
  clone = ""
  pull = ""
  meta = ""

  def __init__(self, name, clone, pull, meta):
    self.name = name
    self.clone = clone
    self.pull = pull
    self.meta = meta

def popen_piped(command, **kwargs):
  cwd = kwargs['cwd']
  final_stdout = kwargs['stdout']
  final_stderr = kwargs['stderr']

  commands = command.split('|')
  proc_prev = None
  proc_curr = None
  for i, command in commands:
    if proc_prev == None:
      proc_curr = Popen(split(command), stdout = PIPE, cwd = cwd)
    elif i == len(commands) - 1:
      proc_curr = Popen(split(command),
          stdin = proc_prev.stdout,
          stdout = final_stdout,
          stderr = final_stderr,
          cwd = cwd)
      proc_prev.stdout.close()
    else:
      proc_curr = Popen(split(command),
          stdin = proc_prev.stdout,
          stdout = PIPE,
          cwd = cwd)
      proc_prev.stdout.close()

    proc_prev = proc_curr
  return proc_curr

def _sync_repos(repos, config):
  for repo in repos:
    Print.update('Syncing repo: %s' % repo)
    repo_dir = os.path.join(config.repos_dir, repo)
    scm = config.detect_scm(repo_dir)
    if scm == None:
      print '%s is an invalid repository' % repo
      return os.EX_DATAERR

    command = scm.pull
    proc = Popen(split(command), cwd = repo_dir)
    proc.wait()
    if proc.returncode != 0:
      return proc.returncode
  return 0

def sync_main(argv, config):
  if len(argv) > 1:
    _sync_repos(argv[1:], config)
  else:
    _sync_repos(config.repo_names, config)
  return 0

def find_main(argv, config):
  if len(argv) < 2:
    find_usage()
    return os.EX_USAGE
  query = argv[1]
  proc = Popen(['ls', config.repos_dir, '|', 'grep', query],
      cwd = config.repos_dir)
  proc.wait()
  return proc.returncode

def ls_main(argv, config):
  proc = Popen(['ls', config.repos_dir])
  proc.wait()
  return proc.returncode

def info_main(argv, config):
  repo = argv[1]
  repo_dir = os.path.join(config.repos_dir, repo)
  if not os.path.exists(repo_dir):
    print 'Cannot find repo: %s' % repo
    return os.EX_DATAERR

  proc = popen_piped('find . -iname "readme*" | head -n 1',
      cwd = repo_dir,
      stdout = PIPE,
      stderr = PIPE)

  out, err = proc.communicate()
  proc = Popen([config.pager, out], cwd = repo_dir)
  proc.wait()
  return proc.returncode

def clone_main(argv, config):
  scm_name = argv[1]
  repo = argv[2]

  scm = config.scm_for_name(scm_name)
  if scm == None:
    print 'Unsupported SCM %s' % scm
    return os.EX_DATAERR

  command = scm.clone
  Print.update('Cloning repo: %s' % repo)
  command.extend(repo)
  proc = Popen(split(command), cwd = config.repos_dir)
  proc.wait()

def default_usage():
  print USAGE_TEXT

def default_main(argv, config):
  try:
    opts, args = getopt.gnu_getopt(argv, DEFAULT_SHORT_OPTS, DEFAULT_LONG_OPTS)
  except getopt.GetoptError as err:
    print str(err)
    default_usage()
    return os.EX_USAGE

  for optopt, optarg in opts:
    if optopt in ['-h', '--help']:
      default_usage()
      sys.exit()
    else:
      assert False, 'Unknown option: %s' % optopt

def scms_init():
  scms = {}
  def scm(name, **kwargs):
    scms[name] = Scm(name, kwargs['clone'], kwargs['pull'], kwargs['meta'])

  scm('git',
      clone = 'git clone',
      pull = 'git pull',
      meta = '.git',
      remote = 'git config --get remote.origin.url')

  scm('svn',
      clone = 'svn co',
      pull = 'svn up',
      meta = '.svn',
      remote = 'svn info | grep \'Repository Root\' | awk \'{print $NF}\'')

  scm('hg',
      clone = 'hg clone',
      pull = 'hg pull --update',
      meta = '.hg',
      remote = 'hg paths default')

  scm('bzr',
      clone = 'bzr branch',
      pull = 'bzr update',
      meta = '.bzr',
      remote = None)

  scm('darcs',
      clone = 'darcs get',
      pull = 'darcs pull',
      meta = '_darcs',
      remote = None)

  scm('depot_tools',
      clone = None,
      pull = 'gclient sync',
      meta = '.gclient',
      remote = None)
  return scms

def configs_init():
  repo_configs = {}
  def repos(name, **kwargs):
    repo_configs[name] = Config(name, kwargs['repos_dir'], kwargs['pager'])

  repos_file_path = os.path.expanduser('~/.repos')
  if not os.path.exists(repos_file_path):
    print 'No .repos file in home directory.'
    sys.exit(0)

  repos_file = open(os.path.expanduser('~/.repos')).read()
  exec(repos_file) in locals()
  return repo_configs

REPOS_FILENAME = 'REPOS'

def repos_init():
  current_dir = '.'
  repos_file = os.path.join(current_dir, REPOS_FILENAME)
  while !os.path.exists(repos_file) and os.path.exists(current_dir):
    current_dir = os.path.abspath(os.path.join(current_dir, os.pardir))
    repos_file = os.path.join(current_dir, REPOS_FILENAME)

  if !os.path.exists(repos_file):
    print 'No REPOS file found.'
    sys.exist(1)

  repos = []
  def repo(url, **kwargs):
    repos.extend([url, kwargs['type']])
  return repos

def main():
  scms = scms_init()
  configs = configs_init()
  repos = repos_init()

  config = None
  args = sys.argv
  if sys.argv[1] in configs:
    config = configs[sys.argv[1]]
    args = sys.argv[2:]
  elif CONFIGS_DEFAULT_KEY in configs:
    config = configs[CONFIGS_DEFAULT_KEY]
    args = sys.argv[1:]
  else:
    print 'No config or default config specified.'
    sys.exit(1)

  config.install_scms(scms)
  sys.exit({
    'sync':  sync_main,
    'find':  find_main,
    'ls':    ls_main,
    'info':  info_main,
    'clone': clone_main,
  }.get(args[0], default_main)(args, config))

if __name__ == '__main__':
  main()
