#!/bin/bash

set -e
set -o pipefail

readonly REPO_PATH=$HOME/repos
readonly VIM_BUNDLE_PATH=$HOME/.vim/bundle
readonly RP_PAGER="vim -u ~/.vimrc.more"

err() {
  echo -e "\033[01;31m$@\033[00m" 1>&2;
}

version() {
  echo "rep - the simple repositories manager."
}

usage() {
  err "Usage: rp OPTION [args]"
  err ""
  err "  Where OPTION may be:"
  err ""
  err "    all       Pull/update all repositories."
  err ""
  err "    sync [REPO]   Detect repository type and update/sync. If"
  err "            REPO argument is set, then only sync the"
  err "            repository REPO in REPO_PATH."
  err ""
  err "    find REPO     Finds all repositories containing REPO."
  err ""
  err "    info [REPO]   Displays readme for REPO if found. If no"
  err "            argument is given, then it attempts to "
  err "            display the readme in the current directory."
  err ""
  err "    ls        Lists all repositories."
  err ""
  err "    SCM REPO    Clones repository REPO using SCM."
  err ""
  err "    help      Displays this usage info."
  err ""
  err "    version     Displays version."
  err ""
}

syncrepo() {
  local current_dir=`pwd`
  echo -e "\033[01;35m$current_dir\033[00m"

  if [ -d $current_dir/.git ]; then
    git pull
  elif [ -d $current_dir/.svn ]; then
    svn up
  elif [ -d $current_dir/.hg ]; then
    hg pull && hg update
  elif [ -d $current_dir/.bzr ]; then
    bzr update
  elif [ -d $current_dir/_darcs ]; then
    darcs pull
  else
    err "Current directory is not a valid repository"
  fi
  echo ""
}

syncall() {
  for dir in $(find $1 -maxdepth 1 -type d); do
    if [ $dir = $1 ]; then
      continue
    fi

    cd $dir && syncrepo
  done
}


showinfo() {
  local readme_file=`find . -iname "readme*" | head -n 1`
  $RP_PAGER $readme_file
}

main() {
  if [ ! -d $REPO_PATH ]; then
    err "$REPO_PATH does not exist."
    exit 1
  fi

  if [ ! -d $VIM_BUNDLE_PATH ]; then
    err "$VIM_BUNDLE_PATH does not exist."
    exit 1
  fi

  case "$1" in
    all)
      syncall $REPO_PATH
      ;;

    vim)
      syncall $VIM_BUNDLE_PATH
      ;;

    sync)
      if [ $# -ne 2 ]; then
        syncrepo
      else
        cd $REPO_PATH/$2 && syncrepo
      fi
      ;;

    find)
      ls $REPO_PATH | grep $2
      ;;

    info)
      if [ $# -eq 1 ]; then
        showinfo
        exit 0
      fi

      if [ ! -d $REPO_PATH/$2 ]; then
        err "Repository $2 not found."
        exit 2
      fi

      cd $REPO_PATH/$2 && showinfo
      ;;

    ls)
      ls $REPO_PATH
      ;;

    git)
      if [ $# -ne 2 ]; then
        usage
        exit 2
      fi

      cd $REPO_PATH
      git clone $2
      ;;

    hg)
      if [ $# -ne 2 ]; then
        usage
        exit 2
      fi

      cd $REPO_PATH
      hg clone $2
      ;;

    svn)
      if [ $# -ne 2 ]; then
        usage
        exit 2
      fi

      cd $REPO_PATH
      svn co $2
      ;;

    bzr)
      if [ $# -ne 2 ]; then
        usage
        exit 2
      fi

      cd $REPO_PATH
      bzr branch $2
      ;;

    darcs)
      if [ $# -ne 2 ]; then
        usage
        exit 2
      fi

      cd $REPO_PATH
      darcs get $2
      ;;

    help)
      usage
      ;;

    search)
      err "Did you mean:"
      err "  rp find"
      ;;

    version)
      version
      ;;

    *)
      err "Invalid option: $1"
      usage
      ;;
  esac
}

main
